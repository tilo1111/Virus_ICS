#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/graphviz.hpp>
#include <iostream>
#include <algorithm>
#include <random>	
#include <ctime>
#include <vector>
#include <fstream>


std::mt19937 generator(time(0));

struct Vertex		// defines structure of a Vertex
{
	std::string state;		// possible states 'S', 'E', 'I', 'R'
	int n_state;			// for fast identifying nodes 1=S 2=E 3=I 4=R
	int rank;				// rank of the node
	int timer;				// in case of time bound recovery
};

typedef boost::adjacency_list<boost::vecS, boost::vecS, boost::undirectedS, Vertex> Graph;

double* ini_parameters()
{
	double  ini_parameters[6];
	std::fstream ini;
	std::string line;
	ini.open("ini_parameters.txt", std::ios::in);
	if (ini.good() == 0)
	{
		std::cout << "Blad pliku." << std::endl;
		return 0;
	}

	int i = 0;
	do
	{
		ini >> ini_parameters[i];
		i++;
	} while (getline(ini, line) && i <= 5);

	return ini_parameters;
}


Graph BA_network(int m, int m0, int n)
{
	Graph G;
	int g_rank = 0;

	if (m <= m0 && m0 <= n)
	{
		for (int i = 0; i < n; i++)	add_vertex({"S", 1, 0}, G);	// generating n starting nodes 

		for (int i = 0; i < m0; i++)
		{
			for (int j = i+1; j < m0; j++)
			{
				add_edge(i, j, G);			// adding edges to starting m0 nodes to make complete graph
				G[i].rank++;
				G[j].rank++;
				g_rank += 2;				// increasing rank of nodes and global rank (sum of all nodes ranks)
			}
		}

		int x = m0;
		std::vector<double> prob(n);
		
		while (x < n)
		{
			for (int i = 0; i < n; i++)		prob[i] = double(G[i].rank) / g_rank;		// probability of attaching i-th node to existing nodes

			for (int i = 0; i < m; i++)		// attaching new node with m edges to existing ones
			{
				std::discrete_distribution<int> dist(prob.begin(), prob.end());		// discrete distribution of probability based on BA algorythm
				int new_node = dist(generator);		// there is possibility to create the same edge several times - NEEDS TO BE REPAIRD
				prob[new_node] = 0;					// zeroing probability of choosing new_node second time
				add_edge(x, new_node, G);
				G[x].rank++;
				G[new_node].rank++;
				g_rank += 2;
			}

			x++;
		}

		return G;
	}
	else
	{
		std::cout << "Wrong parameters" << std::endl;		// if wrong parameters return empty graph with a note
		return G;
	}
}

void graph_save(Graph G, int n)
{
	std::fstream nodes;
	std::fstream edges;
	nodes.open("nodes.txt", std::ios::out);
	edges.open("edges.txt", std::ios::out);

	for (int i = 0; i < n; i++)
	{
		nodes << i << " " << G[i].state << std::endl;

		auto neighbours = boost::adjacent_vertices(i, G);
		for (auto x : make_iterator_range(neighbours))
		{
			if(x > i) edges << i << " " << x << std::endl;
		}
	}

	nodes.close();
	edges.close();
}

int main()
{

	double* parameters = ini_parameters();		// reading parameters from file
	int n = parameters[0];	// number of nodes
	int m0 = parameters[1];		// initial nodes;	m0 <= n
	int m = parameters[2];		// number of edges connecting added node;	m <= m0
	double SI = parameters[3];	// probability S->I
	double IR = parameters[4];	// probability I->R
	double RS = parameters[5];	// probability R->S

	Graph G = BA_network(m, m0, n);

	std::cout << "state getter " << get(&Vertex::state, G)[0] << std::endl;
	std::cout << "n_state getter " << get(&Vertex::n_state, G)[0] << std::endl;
	std::cout << "rank getter " << get(&Vertex::rank, G)[0] << std::endl;

	graph_save(G, n);		// saveing graph into two files



	return 0;
}
